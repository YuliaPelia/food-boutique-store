---
import { getLangFromUrl, useTranslations } from "../i18n/utils";
import { languages } from "../i18n/ui";

const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
---

<nav class="nav">
  <div class="nav__content">
    <ul class="nav__list">
      <li class="">
        <a href={`#about`} class="nav__link">
          {t("header.nav.about")}
        </a>
      </li>
      <li>
        <a href={`#services`} class="nav__link">
          {t("header.nav.services")}
        </a>
      </li>
      <li>
        <a href={`#portfolio`} class="nav__link">
          {t("header.nav.portfolio")}
        </a>
      </li>
      <li>
        <a href={`#blog`} class="nav__link">
          {t("header.nav.blog")}
        </a>
      </li>
      <li>
        <a href={`#contact`} class="nav__link">
          {t("header.nav.contact")}
        </a>
      </li>
      <li>
        <a href={`#contactOrder`} class="nav__link">
          {t("header.nav.contactOrder")}
        </a>
      </li>
    </ul>

    <div class="xl:flex xl:items-center xl:gap-10">
      <ul class="nav__langs">
        {
          Object.entries(languages).map(([lang, label]) => (
            <li class="nav__lang">
              <a
                class={lang === currentLang ? "nav__lang-active" : ""}
                href={`/${lang}/`}
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
      <button class="nav__theme xl:flex xl:flex-col xl:items-center xl:gap-2" id="theme-toggle">
        <span id="theme-icon">‚òÄÔ∏è</span>
        <span id="theme-text">Light</span>
      </button>
    </div>
  </div>
</nav>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById("theme-toggle");
  const themeIcon = document.getElementById("theme-icon");
  const themeText = document.getElementById("theme-text");

  // Get initial theme from localStorage or default to light
  const getInitialTheme = () => {
    return localStorage.getItem("theme") || "light";
  };

  // Update theme display
  const updateThemeDisplay = (theme) => {
    if (theme === "dark") {
      themeIcon.textContent = "üåô";
      themeText.textContent = "Dark";
    } else {
      themeIcon.textContent = "‚òÄÔ∏è";
      themeText.textContent = "Light";
    }
  };

  // Set initial theme
  const currentTheme = getInitialTheme();
  document.documentElement.setAttribute("data-theme", currentTheme);
  updateThemeDisplay(currentTheme);
  if (currentTheme === "dark") {
    document.body.classList.add("dark");
  }

  // Toggle theme on button click
  themeToggle?.addEventListener("click", () => {
    const currentTheme = document.documentElement.getAttribute("data-theme");
    const newTheme = currentTheme === "dark" ? "light" : "dark";

    document.documentElement.setAttribute("data-theme", newTheme);
    document.body.classList.toggle("dark");
    localStorage.setItem("theme", newTheme);
    updateThemeDisplay(newTheme);
  });
</script>
